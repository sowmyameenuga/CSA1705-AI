def is_safe(board, row, col):
    # Check column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check left diagonal
    for i, j in zip(range(row - 1, -1, -1), range(col - 1, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check right diagonal
    for i, j in zip(range(row - 1, -1, -1), range(col + 1, 8)):
        if board[i][j] == 1:
            return False

    return True

def solve(board, row):
    if row == 8:  # All 8 queens placed
        return True

    for col in range(8):
        if is_safe(board, row, col):
            board[row][col] = 1  # Place queen
            if solve(board, row + 1):  # Recur for next row
                return True
            board[row][col] = 0  # Backtrack if no solution
    return False

def print_board(board):
    for row in board:
        print(" ".join('Q' if col == 1 else '.' for col in row))
    print()

# Initialize empty board
board = [[0 for _ in range(8)] for _ in range(8)]

if solve(board, 0):
    print("One solution to the 8-Queens problem is:\n")
    print_board(board)
else:
    print("No solution exists.")
