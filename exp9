import itertools

def calculate_cost(path, dist_matrix):
    cost = 0
    for i in range(len(path) - 1):
        cost += dist_matrix[path[i]][path[i+1]]
    cost += dist_matrix[path[-1]][path[0]]  # Return to start
    return cost

def travelling_salesman(dist_matrix):
    n = len(dist_matrix)
    cities = list(range(n))
    min_cost = float('inf')
    best_path = None

    for perm in itertools.permutations(cities[1:]):  # Fix city 0 as start
        path = [0] + list(perm)
        cost = calculate_cost(path, dist_matrix)
        if cost < min_cost:
            min_cost = cost
            best_path = path

    return best_path, min_cost

# Example distance matrix (symmetric)
dist_matrix = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

path, cost = travelling_salesman(dist_matrix)
print("Best path:", path)
print("Minimum cost:", cost)
